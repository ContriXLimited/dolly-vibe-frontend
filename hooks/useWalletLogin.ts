import { useState, useEffect, useCallback } from 'react'
import { useAccount, useConnect } from 'wagmi'
import { signMessage, getAccount } from '@wagmi/core'
import { getDefaultConfig } from '@rainbow-me/rainbowkit'
import { mainnet, polygon, optimism, arbitrum, base } from 'wagmi/chains'
import { AuthService } from '@/services/auth'
import { setToken, removeToken, getToken } from '@/lib/request'
import type { UseWalletLoginReturn, AuthState } from '@/types/auth'

// Ëé∑Âèñ wagmi config (‰∏é web3-provider.tsx ‰∏≠ÁöÑ‰øùÊåÅ‰∏ÄËá¥)
const config = getDefaultConfig({
  appName: 'Dolly Vibe',
  projectId: process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID || 'c8fa2969f26b7ce7f9d1e9c10bb3de80',
  chains: [mainnet, polygon, optimism, arbitrum, base],
  ssr: true,
})

export function useWalletLogin(): UseWalletLoginReturn {
  const { address, isConnected } = useAccount()
  const { connect, connectors } = useConnect()
  
  const [authState, setAuthState] = useState<AuthState>({
    isLoggedIn: false,
    walletAddress: null,
    user: null,
    accessToken: null
  })
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  // È°µÈù¢Âä†ËΩΩÊó∂ÊÅ¢Â§çËÆ§ËØÅÁä∂ÊÄÅ
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const token = getToken()
      const walletAddress = localStorage.getItem('wallet_address')
      const userData = localStorage.getItem('user_data')
      
      console.log('üîÑ useWalletLogin: ÊÅ¢Â§çËÆ§ËØÅÁä∂ÊÄÅ', {
        hasToken: !!token,
        walletAddress,
        hasUserData: !!userData
      })
      
      if (token && walletAddress && userData) {
        console.log('‚úÖ useWalletLogin: ‰ªéÊú¨Âú∞Â≠òÂÇ®ÊÅ¢Â§çÁôªÂΩïÁä∂ÊÄÅ')
        setAuthState({
          isLoggedIn: true,
          walletAddress,
          user: JSON.parse(userData),
          accessToken: token
        })
      } else {
        console.log('‚ùå useWalletLogin: Ê≤°ÊúâÊúâÊïàÁöÑÊú¨Âú∞ËÆ§ËØÅÁä∂ÊÄÅ')
      }
    }
  }, [])

  // ÁõëÂê¨Èí±ÂåÖËøûÊé•ÂèòÂåñ
  useEffect(() => {
    console.log('üëõ useWalletLogin: Èí±ÂåÖÁä∂ÊÄÅÂèòÂåñ', {
      isConnected,
      address,
      currentWalletAddress: authState.walletAddress,
      isLoggedIn: authState.isLoggedIn
    })

    if (!isConnected || !address) {
      // Èí±ÂåÖÊñ≠ÂºÄËøûÊé•Êó∂Ê∏ÖÈô§Áä∂ÊÄÅ
      if (authState.isLoggedIn) {
        console.log('üîì useWalletLogin: Èí±ÂåÖÊñ≠ÂºÄËøûÊé•ÔºåÊ∏ÖÈô§ÁôªÂΩïÁä∂ÊÄÅ')
        logout()
      }
    } else if (address !== authState.walletAddress && authState.isLoggedIn) {
      // Èí±ÂåÖÂú∞ÂùÄÂèòÂåñÊó∂ÈáçÊñ∞ÁôªÂΩï
      console.log('üîÑ useWalletLogin: Èí±ÂåÖÂú∞ÂùÄÂèòÂåñÔºåÈáçÊñ∞ÁôªÂΩï')
      logout()
    }
  }, [isConnected, address, authState.walletAddress, authState.isLoggedIn])

  const login = useCallback(async () => {
    console.log('üéØ Login attempt:', {
      isConnected,
      address
    })

    if (!address) {
      setError('ËØ∑ÂÖàËøûÊé•Èí±ÂåÖ')
      return
    }

    setIsLoading(true)
    setError(null)

    try {
      // Ê£ÄÊü•ËøûÊé•Áä∂ÊÄÅ
      const account = getAccount(config)
      console.log('üîç ÂΩìÂâçË¥¶Êà∑Áä∂ÊÄÅ:', account)
      
      if (!account.isConnected) {
        console.log('üîå Èí±ÂåÖÊú™ËøûÊé•ÔºåÂ∞ùËØïÈáçÊñ∞ËøûÊé•...')
        // Â∞ùËØï‰ΩøÁî®Á¨¨‰∏Ä‰∏™ÂèØÁî®ÁöÑËøûÊé•Âô®ÔºàÈÄöÂ∏∏ÊòØ MetaMaskÔºâ
        const injectedConnector = connectors.find(c => c.id === 'injected' || c.name.toLowerCase().includes('metamask'))
        if (injectedConnector) {
          connect({ connector: injectedConnector })
          // Á≠âÂæÖËøûÊé•ÂÆåÊàê
          await new Promise(resolve => setTimeout(resolve, 1000))
        } else {
          throw new Error('Êú™ÊâæÂà∞Èí±ÂåÖËøûÊé•Âô®')
        }
      }

      // 1. Ëé∑Âèñ nonce
      console.log('üìù Ëé∑ÂèñÁ≠æÂêç nonce...')
      const nonceResponse = await AuthService.getNonce(address)
      console.log('‚úÖ Nonce Ëé∑ÂèñÊàêÂäü:', nonceResponse)
      console.log('üîç Nonce Â≠óÊÆµÊ£ÄÊü•:', {
        hasNonce: !!nonceResponse.nonce,
        hasMessage: !!nonceResponse.message,
        nonceValue: nonceResponse.nonce,
        messageValue: nonceResponse.message
      })
      
      // 2. ËØ∑Ê±ÇÁî®Êà∑Á≠æÂêç
      console.log('‚úçÔ∏è ËØ∑Ê±ÇÁî®Êà∑Á≠æÂêç...')
      const signature = await signMessage(config, {
        message: nonceResponse.message,
        account: address
      })
      console.log('‚úÖ Á≠æÂêçÊàêÂäü:', signature.slice(0, 10) + '...')

      // 3. È™åËØÅÁ≠æÂêçÂπ∂Ëé∑Âèñ JWT token
      console.log('üîê È™åËØÅÁ≠æÂêç...')
      const loginResponse = await AuthService.verifyWallet({
        walletAddress: address,
        nonce: nonceResponse.nonce,
        signature
      })
      console.log('‚úÖ È™åËØÅÊàêÂäü:', loginResponse)

      if (loginResponse.verified) {
        // 4. ‰øùÂ≠òËÆ§ËØÅÁä∂ÊÄÅ
        setToken(loginResponse.access_token)
        if (typeof window !== 'undefined') {
          localStorage.setItem('wallet_address', loginResponse.walletAddress)
          localStorage.setItem('user_data', JSON.stringify(loginResponse.user))
        }

        setAuthState({
          isLoggedIn: true,
          walletAddress: loginResponse.walletAddress,
          user: loginResponse.user,
          accessToken: loginResponse.access_token
        })
      } else {
        throw new Error('Èí±ÂåÖÈ™åËØÅÂ§±Ë¥•')
      }
    } catch (err: any) {
      console.error('Wallet login failed:', err)
      
      // Â§ÑÁêÜ‰∏çÂêåÁ±ªÂûãÁöÑÈîôËØØ
      if (err.code === 4001) {
        setError('Áî®Êà∑ÂèñÊ∂à‰∫ÜÁ≠æÂêç')
      } else if (err.code === -32002) {
        setError('ËØ∑Ê£ÄÊü•ÊÇ®ÁöÑÈí±ÂåÖÔºåÂèØËÉΩÊúâÂæÖÂ§ÑÁêÜÁöÑËØ∑Ê±Ç')
      } else {
        setError(err.response?.data?.message || err.message || 'ÁôªÂΩïÂ§±Ë¥•ÔºåËØ∑ÈáçËØï')
      }
    } finally {
      setIsLoading(false)
    }
  }, [isConnected, address, connect, connectors])

  const logout = useCallback(() => {
    removeToken()
    if (typeof window !== 'undefined') {
      localStorage.removeItem('wallet_address')
      localStorage.removeItem('user_data')
    }
    setAuthState({
      isLoggedIn: false,
      walletAddress: null,
      user: null,
      accessToken: null
    })
    setError(null)
  }, [])

  return {
    login,
    logout,
    isLoading,
    error,
    authState
  }
}