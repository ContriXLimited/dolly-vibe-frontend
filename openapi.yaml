openapi: 3.0.0
info:
  title: Dolly Vibe API
  description: |
    The Dolly Vibe API provides comprehensive user management, authentication, and social media integration capabilities.
    
    This API supports:
    - User authentication and authorization
    - Social media integration (Discord, Twitter)
    - Wallet verification and blockchain interaction
    - User status tracking and analytics
    
    ## Authentication
    Most endpoints require JWT bearer token authentication. Obtain tokens via the `/auth/login` endpoint.
    
    ## Rate Limiting
    API requests are rate-limited. Please implement appropriate retry logic in your applications.
    
    ## Support
    For API support, please contact our team at support@dollyvibe.com
  version: 1.0.0
  contact:
    name: Dolly Vibe Team
    url: https://dollyvibe.com
    email: support@dollyvibe.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://dollyvibe.com/terms

servers:
  - url: http://localhost:3000
    description: Development server (local testing)
  - url: https://p01--dolly-vibe-backend--jlqhr9wl7sxr.code.run
    description: Northflank deployment server
  - url: https://staging-api.dollyvibe.com
    description: Staging server (pre-production)
  - url: https://api.dollyvibe.com
    description: Production server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 6
          example: password123

    RegisterDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 6
          example: password123
        name:
          type: string
          example: John Doe

    CreateVibeUserDto:
      type: object
      properties:
        discordId:
          type: string
          example: "123456789"
          description: Discord user ID
        twitterId:
          type: string
          example: "987654321"
          description: Twitter user ID
        isJoined:
          type: boolean
          default: false
          description: 是否加入0G项目方Discord
        isFollowed:
          type: boolean
          default: false
          description: 是否关注Dolly Twitter
        status:
          type: string
          enum: [NORMAL, BLACKLIST]
          default: NORMAL
          description: 用户状态

    UpdateVibeUserDto:
      type: object
      properties:
        discordId:
          type: string
          example: "123456789"
        twitterId:
          type: string
          example: "987654321"
        isJoined:
          type: boolean
        isFollowed:
          type: boolean
        status:
          type: string
          enum: [NORMAL, BLACKLIST]

    VibeUser:
      type: object
      properties:
        id:
          type: string
          example: cljk1234567890
        discordId:
          type: string
          example: "123456789"
        twitterId:
          type: string
          example: "987654321"
        isJoined:
          type: boolean
          example: false
        isFollowed:
          type: boolean
          example: false
        status:
          type: string
          enum: [NORMAL, BLACKLIST]
          example: NORMAL
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaginatedVibeUsers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/VibeUser'
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 10

    VibeUserStatistics:
      type: object
      properties:
        totalUsers:
          type: integer
          example: 1000
        normalUsers:
          type: integer
          example: 950
        blacklistedUsers:
          type: integer
          example: 50
        joinedUsers:
          type: integer
          example: 600
        followedUsers:
          type: integer
          example: 700
        bothJoinedAndFollowed:
          type: integer
          example: 500

    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: Bad Request
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: /api/vibe-users

    WalletNonceResponse:
      type: object
      properties:
        nonce:
          type: string
          example: abc123def456
        message:
          type: string
          example: "Please sign this message to verify your wallet: abc123def456"
        expiresAt:
          type: string
          format: date-time

    WalletVerificationDto:
      type: object
      required:
        - walletAddress
        - nonce
        - signature
      properties:
        walletAddress:
          type: string
          example: "0x1234567890123456789012345678901234567890"
        nonce:
          type: string
          example: abc123def456
        signature:
          type: string
          example: "0x123abc..."

    WalletStatusResponse:
      type: object
      properties:
        connected:
          type: boolean
          example: true
        walletAddress:
          type: string
          example: "0x1234567890123456789012345678901234567890"
        verifiedAt:
          type: string
          format: date-time

    SocialConnectionStatus:
      type: object
      properties:
        connected:
          type: boolean
          example: true
        username:
          type: string
          example: "username123"
        userId:
          type: string
          example: "123456789"
        verified:
          type: boolean
          example: true
        connectedAt:
          type: string
          format: date-time

    UserConnectionStatus:
      type: object
      properties:
        discord:
          type: object
          properties:
            connected:
              type: boolean
              example: true
            username:
              type: string
              example: "user#1234"
            userId:
              type: string
              example: "123456789"
            verified:
              type: boolean
              example: true
              description: "是否加入0G Discord"
            isJoined:
              type: boolean
              example: true
              description: "是否加入Discord服务器"
            connectedAt:
              type: string
              format: date-time
        twitter:
          type: object
          properties:
            connected:
              type: boolean
              example: true
            username:
              type: string
              example: "dollyuser"
            userId:
              type: string
              example: "987654321"
            verified:
              type: boolean
              example: true
              description: "是否关注Dolly"
            isFollowed:
              type: boolean
              example: true
              description: "是否关注Dolly Twitter"
            connectedAt:
              type: string
              format: date-time
        wallet:
          type: object
          properties:
            connected:
              type: boolean
              example: true
            walletAddress:
              type: string
              example: "0x123...789"
            verifiedAt:
              type: string
              format: date-time
        overall:
          type: object
          properties:
            allConnected:
              type: boolean
              example: true
            completedAt:
              type: string
              format: date-time
            canProceed:
              type: boolean
              example: true
              description: "是否可以点击Let's Vibe按钮"

    CompletionStats:
      type: object
      properties:
        total:
          type: integer
          example: 1000
          description: "总用户数"
        completed:
          type: integer
          example: 750
          description: "完成所有连接的用户数"
        completionRate:
          type: string
          example: "75.00"
          description: "完成率百分比"
        connections:
          type: object
          properties:
            discord:
              type: integer
              example: 850
              description: "Connected Discord accounts"
            twitter:
              type: integer
              example: 800
              description: "Connected Twitter accounts"
            wallet:
              type: integer
              example: 900
              description: "Connected wallet addresses"
        verified:
          type: object
          properties:
            joinedDiscord:
              type: integer
              example: 700
              description: "Users who joined Discord server"
            followedTwitter:
              type: integer
              example: 650
              description: "Users who followed Twitter account"

    OAuthUrlResponse:
      type: object
      properties:
        oauthUrl:
          type: string
          description: "OAuth authorization URL"
        walletAddress:
          type: string
          description: "Wallet address to bind the account to"
      required:
        - oauthUrl
        - walletAddress

    TwitterFollowCheckResponse:
      type: object
      properties:
        isFollowing:
          type: boolean
          description: "Whether the user is following the target account"
        sourceUser:
          type: string
          description: "Username being checked"
        targetUser:
          type: string
          description: "Target username (Dolly's account)"
        message:
          type: string
          description: "Descriptive message about the follow status"
      required:
        - isFollowing
        - sourceUser
        - targetUser
        - message

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: VibeUser Management
    description: VibeUser CRUD operations
  - name: Wallet Verification
    description: Wallet signature verification
  - name: Discord Integration
    description: Discord OAuth and server verification
  - name: Twitter Integration
    description: Twitter OAuth and follow verification
  - name: User Connection Status
    description: User connection status management

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  user:
                    type: object
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Registration successful
        '401':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /vibe-users:
    post:
      tags:
        - VibeUser Management
      summary: Create a new VibeUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVibeUserDto'
      responses:
        '201':
          description: VibeUser created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeUser'
        '409':
          description: Discord ID or Twitter ID already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - VibeUser Management
      summary: Get all VibeUsers with filtering and pagination
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: discordId
          in: query
          schema:
            type: string
        - name: twitterId
          in: query
          schema:
            type: string
        - name: isJoined
          in: query
          schema:
            type: boolean
        - name: isFollowed
          in: query
          schema:
            type: boolean
        - name: status
          in: query
          schema:
            type: string
            enum: [NORMAL, BLACKLIST]
      responses:
        '200':
          description: List of VibeUsers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVibeUsers'

  /vibe-users/statistics:
    get:
      tags:
        - VibeUser Management
      summary: Get VibeUser statistics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeUserStatistics'

  /vibe-users/discord/{discordId}:
    get:
      tags:
        - VibeUser Management
      summary: Find VibeUser by Discord ID
      security:
        - BearerAuth: []
      parameters:
        - name: discordId
          in: path
          required: true
          schema:
            type: string
          description: Discord user ID
      responses:
        '200':
          description: VibeUser found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeUser'
        '404':
          description: VibeUser not found

  /vibe-users/twitter/{twitterId}:
    get:
      tags:
        - VibeUser Management
      summary: Find VibeUser by Twitter ID
      security:
        - BearerAuth: []
      parameters:
        - name: twitterId
          in: path
          required: true
          schema:
            type: string
          description: Twitter user ID
      responses:
        '200':
          description: VibeUser found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeUser'
        '404':
          description: VibeUser not found

  /vibe-users/{id}:
    get:
      tags:
        - VibeUser Management
      summary: Get VibeUser by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: VibeUser ID
      responses:
        '200':
          description: VibeUser retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeUser'
        '404':
          description: VibeUser not found

    patch:
      tags:
        - VibeUser Management
      summary: Update VibeUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: VibeUser ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVibeUserDto'
      responses:
        '200':
          description: VibeUser updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeUser'
        '404':
          description: VibeUser not found
        '409':
          description: Discord ID or Twitter ID already exists

    delete:
      tags:
        - VibeUser Management
      summary: Delete VibeUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: VibeUser ID
      responses:
        '204':
          description: VibeUser deleted successfully
        '404':
          description: VibeUser not found

  /vibe-users/{id}/status:
    patch:
      tags:
        - VibeUser Management
      summary: Update VibeUser status
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: VibeUser ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [NORMAL, BLACKLIST]
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeUser'
        '404':
          description: VibeUser not found

  /vibe-users/{id}/social-status:
    patch:
      tags:
        - VibeUser Management
      summary: Update VibeUser social status (joined/followed)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: VibeUser ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isJoined:
                  type: boolean
                isFollowed:
                  type: boolean
      responses:
        '200':
          description: Social status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VibeUser'
        '404':
          description: VibeUser not found

  # Wallet Verification APIs
  /auth/wallet/nonce:
    get:
      tags:
        - Wallet Verification
      summary: 获取钱包签名用的nonce
      parameters:
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
            example: "0x1234567890123456789012345678901234567890"
          description: Ethereum wallet address
      responses:
        '200':
          description: Nonce generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletNonceResponse'
        '400':
          description: Invalid wallet address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/wallet/verify:
    post:
      tags:
        - Wallet Verification
      summary: 验证钱包签名
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletVerificationDto'
      responses:
        '200':
          description: Wallet verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                    example: true
                  walletAddress:
                    type: string
                    example: "0x1234567890123456789012345678901234567890"
        '400':
          description: Invalid signature or nonce
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/wallet/status:
    get:
      tags:
        - Wallet Verification
      summary: 检查钱包连接状态
      parameters:
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
            example: "0x1234567890123456789012345678901234567890"
          description: Ethereum wallet address
      responses:
        '200':
          description: Wallet status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStatusResponse'
        '400':
          description: Invalid wallet address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Discord Integration APIs
  /auth/discord/oauth-url:
    get:
      tags:
        - Discord Integration
      summary: 获取Discord OAuth授权URL
      parameters:
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
            example: "0x1234567890123456789012345678901234567890"
          description: Wallet address to bind Discord account to
      responses:
        '200':
          description: Discord OAuth URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthUrlResponse'
              example:
                oauthUrl: "https://discord.com/api/oauth2/authorize?client_id=..."
                walletAddress: "0x1234567890123456789012345678901234567890"
        '400':
          description: Wallet address is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/discord/oauth:
    get:
      tags:
        - Discord Integration
      summary: 启动Discord OAuth授权流程 (重定向版本)
      parameters:
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
            example: "0x1234567890123456789012345678901234567890"
          description: Wallet address to bind Discord account to
      responses:
        '302':
          description: Redirect to Discord OAuth page
        '400':
          description: Wallet address is required

  /auth/discord/callback:
    get:
      tags:
        - Discord Integration
      summary: Discord OAuth回调处理
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Discord authorization code
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: OAuth state parameter
      responses:
        '200':
          description: Discord OAuth completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  discordId:
                    type: string
                    example: "123456789"
                  username:
                    type: string
                    example: "user#1234"
                  isInGuild:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Discord connection successful"
                  walletAddress:
                    type: string
                    example: "0x1234567890123456789012345678901234567890"
                    description: "Wallet address bound to this Discord account"
        '400':
          description: OAuth callback failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/discord/status:
    get:
      tags:
        - Discord Integration
      summary: 检查Discord连接状态
      parameters:
        - name: discordId
          in: query
          required: true
          schema:
            type: string
          description: Discord user ID to check status for
      responses:
        '200':
          description: Discord status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialConnectionStatus'

  /auth/discord/guild-invite:
    get:
      tags:
        - Discord Integration
      summary: 获取0G Discord服务器邀请链接
      responses:
        '200':
          description: Discord invite link
          content:
            application/json:
              schema:
                type: object
                properties:
                  inviteUrl:
                    type: string
                    example: "https://discord.gg/0g-invite"
                  guildName:
                    type: string
                    example: "0G Network"

  # Twitter Integration APIs
  /auth/twitter/oauth-url:
    get:
      tags:
        - Twitter Integration
      summary: 获取Twitter OAuth授权URL
      parameters:
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
            example: "0x1234567890123456789012345678901234567890"
          description: Wallet address to bind Twitter account to
      responses:
        '200':
          description: Twitter OAuth URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthUrlResponse'
              example:
                oauthUrl: "https://api.twitter.com/oauth/authorize?oauth_token=..."
                walletAddress: "0x1234567890123456789012345678901234567890"
        '400':
          description: Wallet address is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/twitter/oauth:
    get:
      tags:
        - Twitter Integration
      summary: 启动Twitter OAuth授权流程 (重定向版本)
      parameters:
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
            example: "0x1234567890123456789012345678901234567890"
          description: Wallet address to bind Twitter account to
      responses:
        '302':
          description: Redirect to Twitter OAuth page

  /auth/twitter/callback:
    get:
      tags:
        - Twitter Integration
      summary: Twitter OAuth回调处理
      parameters:
        - name: oauth_token
          in: query
          required: true
          schema:
            type: string
          description: Twitter OAuth token
        - name: oauth_verifier
          in: query
          required: true
          schema:
            type: string
          description: Twitter OAuth verifier
        - name: walletAddress
          in: query
          required: false
          schema:
            type: string
            example: "0x1234567890123456789012345678901234567890"
          description: Optional wallet address to bind to this Twitter account
      responses:
        '200':
          description: Twitter OAuth completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  twitterId:
                    type: string
                    example: "123456789"
                  username:
                    type: string
                    example: "dollyuser"
                  displayName:
                    type: string
                    example: "Dolly User"
                  isFollowingDolly:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Twitter connection successful"
                  walletAddress:
                    type: string
                    example: "0x1234567890123456789012345678901234567890"
                    description: "Wallet address bound to this Twitter account"
        '400':
          description: OAuth callback failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/twitter/status:
    get:
      tags:
        - Twitter Integration
      summary: 检查Twitter连接状态
      parameters:
        - name: twitterId
          in: query
          required: true
          schema:
            type: string
          description: Twitter user ID to check status for
      responses:
        '200':
          description: Twitter status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialConnectionStatus'

  /auth/twitter/check-follow:
    get:
      tags:
        - Twitter Integration
      summary: 检查用户是否关注Dolly Twitter
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            example: "dollyuser"
          description: Twitter username to check
      responses:
        '200':
          description: Follow status checked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwitterFollowCheckResponse'
              example:
                isFollowing: true
                sourceUser: "dollyuser"
                targetUser: "DollyAI"
                message: "User is following Dolly"
        '400':
          description: Invalid username or API error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/twitter/dolly-profile:
    get:
      tags:
        - Twitter Integration
      summary: 获取Dolly Twitter资料链接
      responses:
        '200':
          description: Dolly Twitter profile info
          content:
            application/json:
              schema:
                type: object
                properties:
                  profileUrl:
                    type: string
                    example: "https://twitter.com/DollyAI"
                  username:
                    type: string
                    example: "DollyAI"
                  displayName:
                    type: string
                    example: "Dolly - AI Assistant"

  # User Connection Status APIs
  /auth/user/status/{id}:
    get:
      tags:
        - User Connection Status
      summary: 获取用户所有连接状态
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: VibeUser ID
      responses:
        '200':
          description: User connection status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConnectionStatus'
        '404':
          description: User not found

  /auth/user/status:
    get:
      tags:
        - User Connection Status
      summary: 根据标识符获取用户连接状态
      parameters:
        - name: discordId
          in: query
          required: false
          schema:
            type: string
          description: Discord user ID
        - name: twitterId
          in: query
          required: false
          schema:
            type: string
          description: Twitter user ID
        - name: walletAddress
          in: query
          required: false
          schema:
            type: string
          description: Wallet address
      responses:
        '200':
          description: User status retrieved or created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  vibeUserId:
                    type: string
                    example: "clj123456789"
                  status:
                    $ref: '#/components/schemas/UserConnectionStatus'

  /auth/user/connect/discord:
    post:
      tags:
        - User Connection Status
      summary: 更新用户Discord连接状态
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - vibeUserId
                - discordId
                - username
                - isJoined
              properties:
                vibeUserId:
                  type: string
                  example: "clj123456789"
                discordId:
                  type: string
                  example: "123456789"
                username:
                  type: string
                  example: "user#1234"
                isJoined:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Discord status updated successfully

  /auth/user/connect/twitter:
    post:
      tags:
        - User Connection Status
      summary: 更新用户Twitter连接状态
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - vibeUserId
                - twitterId
                - username
                - isFollowed
              properties:
                vibeUserId:
                  type: string
                  example: "clj123456789"
                twitterId:
                  type: string
                  example: "987654321"
                username:
                  type: string
                  example: "dollyuser"
                isFollowed:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Twitter status updated successfully

  /auth/user/connect/wallet:
    post:
      tags:
        - User Connection Status
      summary: 更新用户钱包连接状态
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - vibeUserId
                - walletAddress
                - verified
              properties:
                vibeUserId:
                  type: string
                  example: "clj123456789"
                walletAddress:
                  type: string
                  example: "0x1234567890123456789012345678901234567890"
                verified:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Wallet status updated successfully

  /auth/user/status-by-wallet:
    get:
      tags:
        - User Connection Status
      summary: 根据Wallet地址获取用户完整状态
      parameters:
        - name: walletAddress
          in: query
          required: true
          schema:
            type: string
            example: "0x1234567890123456789012345678901234567890"
          description: Ethereum wallet address
      responses:
        '200':
          description: User status retrieved successfully by wallet address
          content:
            application/json:
              schema:
                type: object
                properties:
                  vibeUserId:
                    type: string
                    example: "clj123456789"
                    description: "VibeUser ID"
                  walletAddress:
                    type: string
                    example: "0x1234567890123456789012345678901234567890"
                    description: "Wallet address"
                  status:
                    $ref: '#/components/schemas/UserConnectionStatus'
        '400':
          description: Invalid wallet address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found with this wallet address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/user/stats:
    get:
      tags:
        - User Connection Status
      summary: 获取用户连接完成统计
      responses:
        '200':
          description: User completion statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionStats'